#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 11 90 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 0 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 0 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 11 90 -1 90 -1 1 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 2588 0 27 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 20 3 14 #"\"def_back.rkt\""
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 20 3 27 #"\"matrix-solver-success.scm\""
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 12 #"racket/mpair"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 4 3 1 #" "
0 0 14 3 6 #"earth%"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 14 #"make-2d-vector"
0 0 4 3 9 #"         "
0 0 14 3 13 #"2d-vector-ref"
0 0 4 3 9 #"         "
0 0 14 3 14 #"2d-vector-set!"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 12 #"resistor-vec"
0 0 4 3 9 #"         "
0 0 14 3 11 #"battery-vec"
0 0 4 3 9 #"         "
0 0 14 3 8 #"node-vec"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 15 #"no-of-resistors"
0 0 4 3 9 #"         "
0 0 14 3 15 #"no-of-batteries"
0 0 4 3 9 #"         "
0 0 14 3 11 #"no-of-nodes"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 13 #"make-resistor"
0 0 4 3 9 #"         "
0 0 14 3 12 #"make-battery"
0 0 4 3 9 #"         "
0 0 14 3 9 #"make-node"
0 0 4 3 1 #" "
0 0 14 3 18 #"evaluate-all-wires"
0 0 4 3 1 #" "
0 0 14 3 9 #"make-wire"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 13 #"make-G-matrix"
0 0 4 3 1 #" "
0 0 14 3 14 #"make-BC-matrix"
0 0 4 3 1 #" "
0 0 14 3 13 #"make-A-matrix"
0 0 4 3 1 #" "
0 0 14 3 13 #"make-D-matrix"
0 0 4 3 1 #" "
0 0 14 3 13 #"make-Z-matrix"
0 0 4 3 1 #" "
0 0 14 3 12 #"solve-matrix"
0 0 4 3 1 #" "
0 0 14 3 11 #"fill-values"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 18 #"reset-resistor-vec"
0 0 4 3 1 #" "
0 0 14 3 17 #"reset-battery-vec"
0 0 4 3 1 #" "
0 0 14 3 14 #"reset-node-vec"
0 0 4 3 1 #" "
0 0 14 3 15 #"reset-wire-list"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 10 #"voltmeter%"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 57 #";all the nodes with unknown voltages are stored in a list"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"create-UVN-list"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 3 #"())"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 11 #"no-of-nodes"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"get-voltage"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-field"
0 0 4 3 1 #" "
0 0 14 3 9 #"dependent"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 67
#";all the dependent nodes with unknown voltages are stored in a list"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 21 #"create-dependent-list"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 3 #"())"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 11 #"no-of-nodes"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-field"
0 0 4 3 1 #" "
0 0 14 3 9 #"dependent"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"get-voltage"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 89
(
 #";to calculate the sum of conductances of all the resistors  which ar"
 #"e connected to a node"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"sum-conductance"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 4 3 1 #" "
0 0 14 3 3 #"sum"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"sum"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 2 #"(("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 15 #"has-resistance?"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 15 #"sum-conductance"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 3 #"sum"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 14 #"get-resistance"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"sum-conductance"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"sum"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 50 #"; returns the common things connected to two nodes"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"intersect"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_i"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_j"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_i"
0 0 4 3 1 #" "
0 0 14 3 10 #"things_new"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"things_new"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 2 #"(("
0 0 14 3 6 #"is-in?"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_j"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"things_new"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"things_new"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_i"
0 0 4 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 5 #"())))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 49 #";first part of matrix A ,ie, matrix G is defined "
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-G-matrix"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"create-UVN-list"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"G"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"make-2d-vector"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"fill-diagonals!"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 2 #"(("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 20 #"get-connected-things"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"G"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"sum-conductance"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"fill-others!"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_i"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_j"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 2 #"(("
0 0 14 3 2 #">="
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_i"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 2 #"(("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_i"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 20 #"get-connected-things"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_j"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 20 #"get-connected-things"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 12 #"intersection"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"intersect"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_i"
0 0 4 3 1 #" "
0 0 14 3 8 #"things_j"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 23 3 1 #"("
0 0 16 3 3 #"let"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 2 #"(("
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 21 3 2 #"-1"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"sum-conductance"
0 0 4 3 1 #" "
0 0 14 3 12 #"intersection"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"G"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"G"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_j"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_j"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 3 11 #"           "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_j"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_i"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 15 #"fill-diagonals!"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 12 #"fill-others!"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 14 3 1 #"G"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"zip"
0 0 4 3 1 #" "
0 0 14 3 2 #"l1"
0 0 4 3 1 #" "
0 0 14 3 2 #"l2"
0 0 23 3 1 #")"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 2 #"l1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 1 #"'"
0 0 23 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 2 #"l1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 2 #"l2"
0 0 23 3 3 #")))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"zip"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 2 #"l1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 2 #"l2"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"check"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 14 3 2 #"l1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 21 3 2 #"#t"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 2 #"(("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 2 #"l1"
0 0 23 3 3 #")))"
0 0 4 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 2 #"l1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 73
(
 #";second and third parts of matrix A,ie, matrices B and C are defined"
 #" here"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"make-BC-matrix"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"create-UVN-list"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"make-2d-vector"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 15 #"no-of-batteries"
0 0 4 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"make-2d-vector"
0 0 4 3 1 #" "
0 0 14 3 15 #"no-of-batteries"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_i"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_j"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #")"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 14 3 15 #"no-of-batteries"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 11 #"battery-vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 9 #"get-node1"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_j"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 23 3 2 #"(("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 23 3 1 #"("
0 0 16 3 3 #"let"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 23 3 2 #"[("
0 0 14 3 7 #"battery"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 11 #"battery-vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"is-a?"
0 0 4 3 1 #" "
0 0 14 3 7 #"battery"
0 0 4 3 1 #" "
0 0 14 3 13 #"battery-real%"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 14 3 7 #"battery"
0 0 4 3 1 #" "
0 0 14 3 17 #"get-internal-node"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 14 3 7 #"battery"
0 0 4 3 1 #" "
0 0 14 3 9 #"get-node2"
0 0 23 3 4 #"))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 21 3 2 #"-1"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 2 #"-1"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_j"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_j"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_i"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_j"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 8 #"assist_i"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 52 #";last part of matrix A,ie, matrix D is defined here "
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-D-matrix"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"D"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"make-2d-vector"
0 0 4 3 1 #" "
0 0 14 3 15 #"no-of-batteries"
0 0 4 3 1 #" "
0 0 14 3 15 #"no-of-batteries"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 14 3 1 #"D"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 66
#";matrix A is finally formed using its 4 parts,ie, matrices G B C D"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-A-matrix"
0 0 4 3 1 #" "
0 0 14 3 1 #"G"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 4 3 1 #" "
0 0 14 3 1 #"D"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"A"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 23 3 1 #"("
0 0 14 3 3 #"zip"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"G"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 44 #"                                            "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 36 #"                                    "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 44 #"                                            "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"D"
0 0 23 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 14 3 1 #"A"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 74
(
 #";matrix Z is being created over here using two individual matrices i"
 #" and e"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"sum-current"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 4 3 1 #" "
0 0 14 3 3 #"sum"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"sum"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 2 #"(("
0 0 14 3 5 #"is-a?"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 15 #"current-source%"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"sum-current"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"get-current"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"sum-current"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"sum"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-Z-matrix"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-i-matrix"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"create-UVN-list"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"make-2d-vector"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"i-assist"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 16 3 3 #"let"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 14 3 6 #"things"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 20 #"get-connected-things"
0 0 23 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"sum-current"
0 0 4 3 1 #" "
0 0 14 3 6 #"things"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 23 3 1 #"("
0 0 14 3 8 #"i-assist"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 8 #"i-assist"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-e-matrix"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"e"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"make-2d-vector"
0 0 4 3 1 #" "
0 0 14 3 15 #"no-of-batteries"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 15 #"no-of-batteries"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 14 #"2d-vector-set!"
0 0 4 3 1 #" "
0 0 14 3 1 #"e"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 11 #"battery-vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 7 #"get-EMF"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 14 3 1 #"e"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-i-matrix"
0 0 23 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-e-matrix"
0 0 23 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 83
(
 #";the nodes and resistors are filled with the respective voltages and"
 #" current values"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"fill-values"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"create-UVN-list"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 13 #"dependent-lst"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 21 #"create-dependent-list"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 79
(
 #";to fill the voltages of nodes which are not dependent and have unkn"
 #"own voltage"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 21 #"fill-voltage-in-nodes"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 2 #"(("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 11 #"set-voltage"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 23 3 1 #"("
0 0 14 3 21 #"fill-voltage-in-nodes"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 25 #"fill-current-in-batteries"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 39 #";to fill the current in voltage sources"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 25 #"fill-current-in-batteries"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 2 #"(("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 11 #"battery-vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"set-current"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 25 #"fill-current-in-batteries"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 36 #";to fill voltages in dependent nodes"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 23 #"fill-voltages-in-others"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 2 #"(("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #"))"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 16 3 3 #"let"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 23 3 2 #"[("
0 0 14 3 7 #"voltage"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 17 #"find-till-voltage"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-field"
0 0 4 3 1 #" "
0 0 14 3 11 #"parent-node"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 6 #")))))]"
0 0 4 3 11 #"           "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 11 #"set-voltage"
0 0 4 3 1 #" "
0 0 14 3 7 #"voltage"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 23 #"fill-voltages-in-others"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 6 #"))))))"
0 0 4 3 17 #"                 "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 60
#";to calculate the voltage of parent-node of a dependent node"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 17 #"find-till-voltage"
0 0 4 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 14 3 4 #"node"
0 0 4 3 1 #" "
0 0 14 3 11 #"get-voltage"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 14 3 4 #"node"
0 0 4 3 1 #" "
0 0 14 3 11 #"get-voltage"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 17 #"find-till-voltage"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"get-field"
0 0 4 3 1 #" "
0 0 14 3 11 #"parent-node"
0 0 4 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 39 #";to fill the currents through resistors"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 23 #"fill-resistance-current"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 15 #"no-of-resistors"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 23 3 1 #"("
0 0 16 3 3 #"let"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 2 #"[("
0 0 14 3 3 #"res"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 12 #"resistor-vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 4 3 1 #" "
0 0 14 3 11 #"set-current"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 4 3 1 #" "
0 0 14 3 9 #"get-node2"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"get-voltage"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 45 #"                                             "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 4 3 1 #" "
0 0 14 3 9 #"get-node1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"get-voltage"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 42 #"                                          "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 4 3 1 #" "
0 0 14 3 14 #"get-resistance"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 6 #"assist"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 21 #"fill-voltage-in-nodes"
0 0 4 3 1 #" "
0 0 14 3 12 #"lst-of-nodes"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 23 #"fill-voltages-in-others"
0 0 4 3 1 #" "
0 0 14 3 13 #"dependent-lst"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 23 #"fill-resistance-current"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7         571 4           0 0           0 94 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"G"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-G-matrix"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 2 #"BC"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"make-BC-matrix"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"B"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 2 #"BC"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"C"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 2 #"BC"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"D"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-D-matrix"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"A"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-A-matrix"
0 0 2 3 1 #" "
0 0 14 3 1 #"G"
0 0 2 3 1 #" "
0 0 14 3 1 #"C"
0 0 2 3 1 #" "
0 0 14 3 1 #"B"
0 0 2 3 1 #" "
0 0 14 3 1 #"D"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"make-Z-matrix"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"solve-matrix"
0 0 2 3 1 #" "
0 0 14 3 1 #"A"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"fill-values"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0           0 0 0 4 29 1 #"\n"
0 0 18 3 51 #";debugger to check whether all the nodes are filled"
0 0 4 29 1 #"\n"
0 7         367 4           0 0           0 60 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"display-as"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 2 3 2 #"  "
0 0 14 3 11 #"no-of-nodes"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 23 3 1 #"("
0 0 16 3 5 #"begin"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 7 #"display"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"send"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 11 #"get-voltage"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 7 #"newline"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 10 #"display-as"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 2 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 6 #"))))))"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 18 #"; A sample Circuit"
0 0 4 29 1 #"\n"
0 7        2797 4           0 0           0 465 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 13 #"make-resistor"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 13 #"make-resistor"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"4"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 13 #"make-resistor"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 21 3 1 #"6"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 13 #"make-resistor"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"6"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"7"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 13 #"make-resistor"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"7"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"8"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"make-battery"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"15"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"14"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 21 3 2 #"30"
0 0 2 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"make-battery"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"12"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"11"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 21 3 2 #"10"
0 0 2 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"make-battery"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"13"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 21 3 2 #"10"
0 0 2 3 1 #" "
0 0 21 3 1 #"6"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 5 #"earth"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"new"
0 0 2 3 1 #" "
0 0 14 3 6 #"earth%"
0 0 2 3 1 #" "
0 0 23 3 1 #"["
0 0 14 3 5 #"node1"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"8"
0 0 23 3 4 #")]))"
0 0 2 29 1 #"\n"
0 0 18 3 66
#";(make-resistor (vector-ref node-vec 2) (vector-ref node-vec 3) 1)"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-wire"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"15"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-wire"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-wire"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-wire"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"4"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"6"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-wire"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"6"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"5"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-wire"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"9"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"8"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 18 3 60
#";(make-wire (vector-ref node-vec 8) (vector-ref node-vec 7))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-wire"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"9"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"10"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-wire"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 1 #"9"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"11"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-wire"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"13"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"14"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-wire"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"14"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 8 #"node-vec"
0 0 2 3 1 #" "
0 0 21 3 2 #"12"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 18 #"evaluate-all-wires"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0           0
